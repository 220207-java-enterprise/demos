package com.revature.app;

import java.util.Arrays;

public class StringDriver extends Object {

    public static void main(String[] args) {
        String s1 = "hello";
        System.out.println(s1 + ", world");
        System.out.println(s1);

        // Strings are immutable, once their value is instantiated it cannot be changed
        s1.concat(", world!"); // we are ignoring the result of this method call
        System.out.println(s1); // s1 is unchanged

        // Assigning a new value to s1 seems to work
        s1 = s1.concat(", world!");
        System.out.println(s1);

        // Common String API methods
        char firstChar = s1.charAt(0);
        System.out.println(firstChar);

        String allButTheFirst = s1.substring(1); // remember, indexing is 0-based
        System.out.println(allButTheFirst);

        String anotherSubstring = s1.substring(1, 4); // inclusive lower bound, non-inclusive upper bound
        System.out.println(anotherSubstring);

        int stringLength = s1.length();
        System.out.println(stringLength);

        String quickFox = "The quick brown fox jumped over the lazy dog.";
        String[] words = quickFox.split(" ");
        System.out.println(Arrays.toString(words));

        String anotherSplitExample = "here-we-go";
        String[] moreWords = anotherSplitExample.split("-");
        System.out.println(Arrays.toString(moreWords));

        // --------------------------------------------

        System.out.println("+-------------------------------+");

        // String Pool

        // A special area of heap memory that stores unique String objects within

        String s2 = "hello"; // using "" for String instantiation is known as String literals
        String s3 = "hello";
        System.out.println(s2.equals(s3)); // by default (same as ==), unless overridden; otherwise it's for value equality
        System.out.println(s2 == s3); // reference equality (same exact object in memory?)

        // So String literals with the same value point to the same object in memory.

        // Can we change this?
        String s4 = new String("hello");
        System.out.println(s2.equals(s4));
        System.out.println(s2 == s4);

        s4 = s4.intern(); // tells Java that to create a String object within the String Pool with this string's value
        System.out.println(s2 == s4);

        String s5 = "";
        String s6 = s5.concat("hello"); // String objects generated by String API methods are not automatically put into the String pool
        System.out.println(s2 == s6); // false

        //-------------------------------------------------

        // StringBuilder/Buffer

//        StringBuilder strBuilder = ""; // cannot instantiate StringBuilders with String literals
        StringBuilder strBuilder = new StringBuilder("some initial string value");

        // Method chaining is possible here, b/c the append method returns a reference to this StringBuilder object
        strBuilder.append(", appended value")
                  .append(", and another")
                  .append(", last one");

        String builtString = strBuilder.toString();

        System.out.println(builtString);
        System.out.println(builtString.equals(strBuilder));
    }

    public static String returnsString(char[] chars) {
        return new String(chars); // probably one of the only actual use cases of new String();
    }
}
